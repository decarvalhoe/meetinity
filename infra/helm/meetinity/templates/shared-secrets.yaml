{{- $root := . }}
{{- $baseLabels := (include "meetinity.labels" $root | fromYaml) }}
{{- $defaultStore := dict }}
{{- if and $root.Values.global (hasKey $root.Values.global "secretStores") }}
{{- $defaultStore = (index $root.Values.global.secretStores "default" | default (dict)) }}
{{- end }}
{{- range $secret := ($root.Values.shared.sealedSecrets | default list) }}
{{- $labels := merge (dict) $baseLabels ($secret.labels | default (dict)) }}
{{ include "common.sealedSecret" (dict "name" (printf "%s-%s" (include "meetinity.fullname" $root) $secret.name) "namespace" $secret.namespace "labels" $labels "annotations" ($secret.annotations | default (dict)) "encryptedData" $secret.encryptedData "type" $secret.type) }}
---
{{- end }}
{{- range $secret := ($root.Values.shared.vaultSecrets | default list) }}
{{- $labels := merge (dict) $baseLabels ($secret.labels | default (dict)) }}
{{- $store := deepCopy (default $defaultStore $secret.secretStoreRef) }}
{{- if hasKey $store "name" }}
  {{- $_ := set $store "name" (tpl (toString $store.name) $root) }}
{{- end }}
{{- if hasKey $store "namespace" }}
  {{- $_ := set $store "namespace" (tpl (toString $store.namespace) $root) }}
{{- end }}
{{- $namespace := "" }}
{{- with $secret.namespace }}
  {{- $namespace = tpl (toString .) $root }}
{{- end }}
{{- $target := deepCopy ($secret.target | default (dict)) }}
{{- if hasKey $target "name" }}
  {{- $_ := set $target "name" (tpl (toString $target.name) $root) }}
{{- end }}
{{- if hasKey $target "creationPolicy" }}
  {{- $_ := set $target "creationPolicy" (tpl (toString $target.creationPolicy) $root) }}
{{- end }}
{{- $data := list }}
{{- range $entry := ($secret.data | default list) }}
  {{- $remoteRef := deepCopy ($entry.remoteRef | default (dict)) }}
  {{- if hasKey $remoteRef "key" }}
    {{- $_ := set $remoteRef "key" (tpl (toString $remoteRef.key) $root) }}
  {{- end }}
  {{- if hasKey $remoteRef "property" }}
    {{- $_ := set $remoteRef "property" (tpl (toString $remoteRef.property) $root) }}
  {{- end }}
  {{- $data = append $data (dict "secretKey" $entry.secretKey "remoteRef" $remoteRef) }}
{{- end }}
{{- $dataFrom := list }}
{{- range $source := ($secret.dataFrom | default list) }}
  {{- $sourceCopy := deepCopy $source }}
  {{- if hasKey $sourceCopy "extract" }}
    {{- if hasKey $sourceCopy.extract "key" }}
      {{- $_ := set $sourceCopy.extract "key" (tpl (toString $sourceCopy.extract.key) $root) }}
    {{- end }}
  {{- end }}
  {{- $dataFrom = append $dataFrom $sourceCopy }}
{{- end }}
{{- $path := "" }}
{{- with $secret.path }}
  {{- $path = tpl (toString .) $root }}
{{- end }}
{{- $dataArg := ternary $data nil (gt (len $data) 0) }}
{{- $dataFromArg := ternary $dataFrom nil (gt (len $dataFrom) 0) }}
{{ include "common.externalSecret" (dict "name" (printf "%s-%s" (include "meetinity.fullname" $root) $secret.name) "namespace" $namespace "labels" $labels "annotations" ($secret.annotations | default (dict)) "refreshInterval" $secret.refreshInterval "secretStoreRef" $store "target" $target "data" $dataArg "dataFrom" $dataFromArg "path" (ternary $path nil (ne $path ""))) }}
---
{{- end }}
