name: CI

on:
  push:
    branches: ['**']
  pull_request:

jobs:
  build:
    name: Build & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Node.js manifests
        id: node_manifests
        run: |
          package_json=$(git ls-files -- ':**/package.json')
          if [ -n "$package_json" ]; then
            echo "has_package=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_package=false" >> "$GITHUB_OUTPUT"
          fi

          lock_files=$(git ls-files -- ':**/package-lock.json' ':**/npm-shrinkwrap.json' ':**/yarn.lock')
          if [ -n "$lock_files" ]; then
            echo "has_lock=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_lock=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Node.js
        if: steps.node_manifests.outputs.has_package == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        if: steps.node_manifests.outputs.has_lock == 'true'
        run: npm ci

      - name: Skip Node.js install
        if: steps.node_manifests.outputs.has_package == 'true' && steps.node_manifests.outputs.has_lock != 'true'
        run: echo 'Node.js project detected without a lockfile. Skipping npm ci.'

      - name: Run lint
        if: steps.node_manifests.outputs.has_package == 'true'
        run: |
          if npm run | grep -q "lint"; then
            npm run lint
          else
            echo 'No lint script found in package.json. Skipping lint.'
          fi

      - name: Skip lint
        if: steps.node_manifests.outputs.has_package != 'true'
        run: echo 'No package.json found. Skipping lint.'

  test:
    name: Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Node.js manifests
        id: node_manifests
        run: |
          package_json=$(git ls-files -- ':**/package.json')
          if [ -n "$package_json" ]; then
            echo "has_package=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_package=false" >> "$GITHUB_OUTPUT"
          fi

          lock_files=$(git ls-files -- ':**/package-lock.json' ':**/npm-shrinkwrap.json' ':**/yarn.lock')
          if [ -n "$lock_files" ]; then
            echo "has_lock=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_lock=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Node.js
        if: steps.node_manifests.outputs.has_package == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        if: steps.node_manifests.outputs.has_lock == 'true'
        run: npm ci

      - name: Skip Node.js install
        if: steps.node_manifests.outputs.has_package == 'true' && steps.node_manifests.outputs.has_lock != 'true'
        run: echo 'Node.js project detected without a lockfile. Skipping npm ci.'

      - name: Run tests
        if: steps.node_manifests.outputs.has_package == 'true'
        run: |
          if npm run | grep -q " test"; then
            npm test -- --watch=false || npm test
          else
            echo 'No test script found in package.json. Skipping tests.'
          fi

      - name: Skip tests
        if: steps.node_manifests.outputs.has_package != 'true'
        run: echo 'No package.json found. Skipping tests.'

  integration-tests:
    name: Integration Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install pytest requests PyJWT

      - name: Confirm Docker availability
        run: docker compose version

      - name: Run integration suite
        run: pytest -m integration tests/integration -vv

  event-driven-tests:
    name: Event-driven Tests
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/notification-service
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt pytest

      - name: Run event-driven tests
        run: pytest -m eventdriven -vv

  data-pipelines:
    name: Data pipeline validation
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install analytics tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r infra/data/requirements-ci.txt

      - name: Validate Airflow & dbt assets
        working-directory: infra/data
        run: make ci

  analytics-tests:
    name: Analytics Service Tests
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/analytics-service
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt pytest

      - name: Run unit tests
        run: pytest -vv

  payment-service-tests:
    name: Payment Service Tests
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/payment-service
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt pytest

      - name: Run pytest
        run: pytest -vv

  search-service-tests:
    name: Search Service Tests
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/search-service
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt pytest

      - name: Run pytest
        env:
          SEARCH_USE_IN_MEMORY: '1'
        run: pytest -vv

  payment-contract-tests:
    name: Payment Contract Tests
    needs: payment-service-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r services/payment-service/requirements.txt pytest

      - name: Run contract tests
        run: pytest tests/contracts -k payment -vv

  security_scan:
    name: Security Scan
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Node.js manifests
        id: node_manifests
        run: |
          package_json=$(git ls-files -- ':**/package.json')
          if [ -n "$package_json" ]; then
            echo "has_package=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_package=false" >> "$GITHUB_OUTPUT"
          fi

          lock_files=$(git ls-files -- ':**/package-lock.json' ':**/npm-shrinkwrap.json' ':**/yarn.lock')
          if [ -n "$lock_files" ]; then
            echo "has_lock=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_lock=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Node.js
        if: steps.node_manifests.outputs.has_package == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        if: steps.node_manifests.outputs.has_lock == 'true'
        run: npm ci

      - name: Skip Node.js install
        if: steps.node_manifests.outputs.has_package == 'true' && steps.node_manifests.outputs.has_lock != 'true'
        run: echo 'Node.js project detected without a lockfile. Skipping npm ci.'

      - name: Run npm audit
        if: steps.node_manifests.outputs.has_lock == 'true'
        run: npm audit --production

      - name: Skip npm audit
        if: steps.node_manifests.outputs.has_lock != 'true'
        run: echo 'No Node.js lockfile found. Skipping npm audit.'

  helm:
    name: Helm validation
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.2

      - name: Build Helm dependencies
        run: |
          helm dependency update infra/helm/meetinity
          for chart in infra/helm/meetinity/charts/*; do
            if [ -d "$chart" ] && [ -f "$chart/Chart.yaml" ]; then
              helm dependency update "$chart" || true
            fi
          done

      - name: Lint Helm charts
        run: |
          helm lint infra/helm/meetinity
          for chart in infra/helm/meetinity/charts/*; do
            if [ -d "$chart" ] && [ -f "$chart/Chart.yaml" ]; then
              helm lint "$chart"
            fi
          done

      - name: Render default manifests
        run: helm template meetinity infra/helm/meetinity --values infra/helm/meetinity/values.yaml

      - name: Render dev manifests
        run: helm template meetinity infra/helm/meetinity --values infra/helm/meetinity/values.yaml --values infra/helm/meetinity/values/dev.yaml

      - name: Render staging manifests
        run: helm template meetinity infra/helm/meetinity --values infra/helm/meetinity/values.yaml --values infra/helm/meetinity/values/staging.yaml

  performance_tests:
    name: Performance tests (k6)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up k6
        uses: grafana/setup-k6-action@v0.5.0

      - name: Run k6 smoke test
        run: |
          set -euo pipefail
          mkdir -p reports/performance
          k6 run tests/performance/smoke.js \
            --summary-export=reports/performance/summary.json \
            --out json=reports/performance/results.json
        env:
          K6_TARGET_URL: ${{ vars.K6_TARGET_URL || 'https://test-api.k6.io/public/crocodiles/1/' }}

      - name: Upload k6 report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-performance-report
          path: reports/performance
          if-no-files-found: warn

  zap_scan:
    name: OWASP ZAP baseline scan
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Run ZAP baseline scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: ${{ vars.ZAP_TARGET_URL || 'https://test-api.k6.io' }}
          cmd_options: '-a -j'
          allow_issue_warnings: true
          fail_action: false

      - name: Upload ZAP artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: |
            zap*
            report_html/**
          if-no-files-found: warn

  trivy_scan:
    name: Trivy filesystem scan
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.21.0
        with:
          scan-type: fs
          format: json
          output: trivy-report.json
          ignore-unfixed: true

      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-vulnerability-report
          path: trivy-report.json
          if-no-files-found: warn

      - name: Render prod manifests
        run: helm template meetinity infra/helm/meetinity --values infra/helm/meetinity/values.yaml --values infra/helm/meetinity/values/prod.yaml
