version: "3.9"

services:
  postgres:
    image: postgres:15
    container_name: meetinity-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-meetinity}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-meetinity}
      POSTGRES_DB: ${POSTGRES_DB:-meetinity}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-meetinity}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meetinity-net

  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: meetinity-zookeeper
    restart: unless-stopped
    environment:
      ZOO_ENABLE_AUTH: "no"
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    networks:
      - meetinity-net

  kafka:
    image: bitnami/kafka:3.5
    container_name: meetinity-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 6
    networks:
      - meetinity-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: meetinity-kafka-ui
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "${KAFKA_UI_PORT:-8085}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: meetinity
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - meetinity-net

  wiremock:
    image: wiremock/wiremock:3.3.1
    container_name: meetinity-wiremock
    restart: unless-stopped
    ports:
      - "${WIREMOCK_PORT:-8089}:8080"
    command:
      - "--verbose"
      - "--global-response-templating"
    volumes:
      - ./infra/mocks/wiremock:/home/wiremock
    networks:
      - meetinity-net

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: meetinity-api-gateway
    restart: unless-stopped
    env_file:
      - .env.dev
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    environment:
      FLASK_APP: src.main:app
      FLASK_RUN_HOST: 0.0.0.0
      FLASK_RUN_PORT: 8080
      FLASK_DEBUG: "1"
      PORT: 8080
      PYTHONUNBUFFERED: "1"
    command: >
      sh -c "flask run --debug --host=0.0.0.0 --port 8080"
    volumes:
      - ./services/api-gateway:/app
    networks:
      - meetinity-net

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: meetinity-user-service
    restart: unless-stopped
    env_file:
      - .env.dev
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "${USER_SERVICE_PORT:-8081}:8080"
    environment:
      FLASK_APP: src.main:create_app
      FLASK_RUN_HOST: 0.0.0.0
      FLASK_RUN_PORT: 8080
      FLASK_DEBUG: "1"
      APP_PORT: 8080
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER:-meetinity}:${POSTGRES_PASSWORD:-meetinity}@postgres:5432/${POSTGRES_DB:-meetinity}
      PYTHONUNBUFFERED: "1"
    command: >
      sh -c "alembic upgrade head && flask run --debug --host=0.0.0.0 --port 8080"
    volumes:
      - ./services/user-service:/app
    networks:
      - meetinity-net

  matching-service:
    build:
      context: ./services/matching-service
      dockerfile: Dockerfile
    container_name: meetinity-matching-service
    restart: unless-stopped
    env_file:
      - .env.dev
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "${MATCHING_SERVICE_PORT:-8082}:8080"
    environment:
      FLASK_APP: src.main:app
      FLASK_RUN_HOST: 0.0.0.0
      FLASK_RUN_PORT: 8080
      FLASK_DEBUG: "1"
      DATABASE_URI: postgresql+psycopg://${POSTGRES_USER:-meetinity}:${POSTGRES_PASSWORD:-meetinity}@postgres:5432/${POSTGRES_DB:-meetinity}?options=-csearch_path%3Dmatching
      PYTHONUNBUFFERED: "1"
    command: >
      sh -c "alembic upgrade head && flask run --debug --host=0.0.0.0 --port 8080"
    volumes:
      - ./services/matching-service:/app
    networks:
      - meetinity-net

  event-service:
    build:
      context: ./services/event-service
      dockerfile: Dockerfile
    container_name: meetinity-event-service
    restart: unless-stopped
    env_file:
      - .env.dev
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "${EVENT_SERVICE_PORT:-8083}:8080"
    environment:
      FLASK_APP: src.main:create_app
      FLASK_RUN_HOST: 0.0.0.0
      FLASK_RUN_PORT: 8080
      FLASK_DEBUG: "1"
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER:-meetinity}:${POSTGRES_PASSWORD:-meetinity}@postgres:5432/${POSTGRES_DB:-meetinity}
      PYTHONUNBUFFERED: "1"
    command: >
      sh -c "alembic upgrade head && flask run --debug --host=0.0.0.0 --port 8080"
    volumes:
      - ./services/event-service:/app
    networks:
      - meetinity-net

  seed-data:
    image: postgres:15
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-meetinity}
    volumes:
      - ./scripts/dev/sql:/seed:ro
    entrypoint:
      - sh
      - -c
      - psql -h postgres -U ${POSTGRES_USER:-meetinity} -d ${POSTGRES_DB:-meetinity} -f /seed/seed.sql
    profiles:
      - seed
    networks:
      - meetinity-net

volumes:
  postgres-data:
  kafka-data:
  zookeeper-data:

networks:
  meetinity-net:
    driver: bridge
