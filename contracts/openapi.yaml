openapi: 3.0.3
info:
  title: Meetinity API
  description: API pour l'application de networking professionnel Meetinity
  version: 1.0.0
  contact:
    name: Meetinity Team

servers:
  - url: https://api.meetinity.com
    description: Production
  - url: http://localhost:5000
    description: Development

paths:
  /auth/login:
    post:
      summary: Connexion utilisateur
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required: [email, password]
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  expires_in:
                    type: integer

  /auth/linkedin:
    get:
      summary: Redirection OAuth LinkedIn
      tags: [Authentication]
      responses:
        '302':
          description: Redirection vers LinkedIn

  /auth/linkedin/callback:
    get:
      summary: Callback OAuth LinkedIn
      description: Vérifie côté serveur la correspondance du couple code/state renvoyé par LinkedIn avant d'établir la session utilisateur.
      tags: [Authentication]
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          description: Jeton anti-CSRF généré côté serveur et renvoyé par LinkedIn pour valider la requête.
          schema:
            type: string
            example: 1a2b3c4d5e
      responses:
        '200':
          description: Authentification réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Paramètre state manquant ou invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profiles:
    get:
      summary: Obtenir les profils paginés pour le swipe
      description: Permet de récupérer une liste paginée de profils à parcourir avec support du décalage et d'une limite configurable.
      tags: [Profiles]
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Nombre maximum de profils à retourner par page.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
        - name: offset
          in: query
          description: Décalage de pagination indiquant le nombre de profils à ignorer.
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 500
      responses:
        '200':
          description: Liste des profils avec métadonnées de pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  profiles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
                  total:
                    type: integer
                  has_more:
                    type: boolean
                  next_offset:
                    type: integer
                required: [profiles, total, has_more]

  /events:
    get:
      summary: Obtenir les événements paginés
      description: Retourne une liste paginée d'événements filtrables par catégorie ou recherche, avec contrôle du nombre d'éléments et du décalage.
      tags: [Events]
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: Nombre maximum d'événements à retourner par page.
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Décalage de pagination indiquant le nombre d'événements à ignorer.
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 1000
      responses:
        '200':
          description: Liste des événements avec métadonnées de pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  total:
                    type: integer
                  has_more:
                    type: boolean
                  next_offset:
                    type: integer
                required: [events, total, has_more]

  /events/{id}/join:
    post:
      summary: S'inscrire à un événement
      tags: [Events]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Inscription réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  registration_id:
                    type: integer

  /conversations:
    get:
      summary: Obtenir les conversations
      tags: [Messages]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'

  /conversations/{id}/messages:
    get:
      summary: Obtenir les messages d'une conversation
      tags: [Messages]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Messages de la conversation
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'

    post:
      summary: Envoyer un message
      tags: [Messages]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  maxLength: 1000
              required: [text]
      responses:
        '201':
          description: Message envoyé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
        profession:
          type: string
        company:
          type: string
        created_at:
          type: string
          format: date-time

    Profile:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        profession:
          type: string
        company:
          type: string
        bio:
          type: string
        skills:
          type: array
          items:
            type: string
        location:
          type: string
        avatar_url:
          type: string

    Event:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        event_date:
          type: string
          format: date
        start_time:
          type: string
          format: time
        location:
          type: object
          properties:
            name:
              type: string
            address:
              type: string
        category:
          type: string
        is_free:
          type: boolean
        capacity:
          type: integer

    Conversation:
      type: object
      properties:
        id:
          type: integer
        participant_name:
          type: string
        participant_avatar:
          type: string
        last_message:
          type: object
          properties:
            text:
              type: string
            timestamp:
              type: string
              format: date-time
        unread_count:
          type: integer

    Message:
      type: object
      properties:
        id:
          type: integer
        conversation_id:
          type: integer
        sender_id:
          type: integer
        sender_name:
          type: string
        text:
          type: string
        timestamp:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
          description: Code d'erreur machine interprétable.
          example: INVALID_STATE
        message:
          type: string
          description: Description lisible du problème rencontré.
          example: Le paramètre state est manquant ou invalide.
